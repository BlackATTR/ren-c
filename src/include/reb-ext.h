//
//  File: %reb-ext.h
//  Summary: "R3-Alpha Extension Mechanism API"
//  Project: "Rebol 3 Interpreter and Run-time (Ren-C branch)"
//  Homepage: https://github.com/metaeducation/ren-c/
//
//=////////////////////////////////////////////////////////////////////////=//
//
// Copyright 2012 REBOL Technologies
// Copyright 2012-2017 Rebol Open Source Contributors
// REBOL is a trademark of REBOL Technologies
//
// See README.md and CREDITS.md for more information.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//=////////////////////////////////////////////////////////////////////////=//
//
// These are definitions that need to be visible to both %a-lib.c and
// "libRebol" clients.
//
// Historically, routines exported as libRebol were prefixed by "RL_"
// (Rebol Lib).  Interactions with the garbage collector were quite shaky,
// because they used their own proxy for REBVAL cells which contained raw
// pointers to series...and generally speaking, raw series pointers were
// being held in arbitrary locations in user code the GC could not find.
//
// Ren-C split this into two kinds of clients: one that can use the internal
// API, including things like PUSH_GUARD_VALUE() and SER_HEAD(), with all
// the powers and responsibility of a native in the EXE.  Then the libRebol
// clients do not know what a REBSER is, they only have REBVAL pointers...
// which are opaque, and they can't pick them apart.  This means the GC
// stays in control.
//
// Clients would use the libRebol API for simple embedding where the concerns
// are mostly easy bridging to run some Rebol code and get information back.
// The internal API is used for extensions or the authoring of "user natives"
// which are Rebol functions whose body is a compiled string of C code.
//

#include "reb-defs.h"

// This table of types used to be automatically generated by complex scripts.
// Yet the original theory of these values is that they would be kept in a
// persistent order, and REB_XXX values might be rearranged for other reasons.
//
// !!! Currently these are hardcoded in an enum.  The values are a mix of
// their "historical" values, which gives a feeling of how it might come to
// have gaps over time if this parallel table is kept this way.  It includes
// deliberate curveballs to using range tests for group membership for groups
// that might change or expand, e.g. (t >= REB_BLOCK && t <= REB_PATH)...as
// those kinds of tests are a bad idea unless a strong commitment is made to
// that group never changing or expanding!

enum REBOL_Ext_Types
{
    RXT_0 = 0, // "void" indicator, though not technically a "datatype"

    RXT_BLANK = 1,
    RXT_HANDLE = 2,
    RXT_LOGIC = 3,
    RXT_INTEGER = 4,
    RXT_DECIMAL = 5,
    RXT_VARARGS = 6, // !!! deliberate curveball to ANY-NUMBER! testing
    RXT_PERCENT = 7,
    
    RXT_CHAR = 10,
    RXT_PAIR = 11,
    RXT_TUPLE = 12,
    RXT_TIME = 13,
    RXT_DATE = 14,

    RXT_WORD = 16,
    RXT_SET_WORD = 17,
    RXT_GET_WORD = 18,
    RXT_TYPESET = 19, // !!! deliberate curveball to ANY-WORD! testing
    RXT_LIT_WORD = 20,
    RXT_REFINEMENT = 21,
    RXT_ISSUE = 22,

    RXT_STRING = 24,
    RXT_FILE = 25,
    RXT_EMAIL = 26,
    RXT_PORT = 27, // !!! deliberate curveball to ANY-STRING! testing
    RXT_URL = 28,
    RXT_TAG = 29,

    RXT_BLOCK = 32,
    RXT_GROUP = 33,
    RXT_PATH = 34,
    RXT_MONEY = 35, // !!! deliberate curveball to ANY-ARRAY! testing
    RXT_SET_PATH = 36,
    RXT_GET_PATH = 37,
    RXT_LIT_PATH = 38,

    RXT_BINARY = 40,
    RXT_BITSET = 41,
    RXT_VECTOR = 42,
    RXT_IMAGE = 43,

    RXT_GOB = 47,
    RXT_OBJECT = 48,
    RXT_MODULE = 49,

    RXT_MAP = 60,
    RXT_FRAME = 61,
    RXT_ERROR = 62,
    
    RXT_BAR = 64,
    RXT_LIT_BAR = 65,
    
    RXT_FUNCTION = 67,
    RXT_DATATYPE = 69,
    
    RXT_EVENT = 71,
    RXT_STRUCT = 72,
    RXT_LIBRARY = 73,

    RXT_MAX
};

typedef unsigned char REBRXT;

// "Dangerous Function" which is called by rebRescue().  Argument can be a
// REBVAL* but does not have to be.  Result must be a REBVAL* or NULL.
//
// !!! If the dangerous function returns an ERROR!, it will currently be
// converted to void, in a behavior which parallels TRAP without a handler.
// voids will also be converted to BLANK!s.
//
typedef REBVAL* (REBDNG)(void *opaque);

// "Rescue Function" which is called as the handler in rebRescueWith().  It
// receives the REBVAL* of the error that occurred, and the opaque pointer.
//
// !!! If either the dangerous function or the rescuing function return an
// ERROR! value, that is not interfered with the way rebRescue() does.
//
typedef REBVAL* (REBRSC)(REBVAL *error, void *opaque);
